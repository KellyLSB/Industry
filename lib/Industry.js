// Generated by CoffeeScript 1.6.3
(function() {
  var $, CollectionFactory, IndustryCollection, IndustryModel, ModelFactory, _, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IndustryModel = (function() {
    IndustryModel.prototype._traits = {};

    IndustryModel.prototype._data = {};

    IndustryModel.prototype._base = function() {
      return {};
    };

    IndustryModel.prototype._klass = false;

    function IndustryModel(data) {
      this._traits = {};
      this._data = {};
      this._base = function() {
        return {};
      };
      this._klass = false;
    }

    IndustryModel.prototype.trait = function(name, afunc) {
      return this._traits[name] = afunc;
    };

    IndustryModel.prototype.traits = function(traits) {
      return this._traits = $.extend(this._traits, traits);
    };

    IndustryModel.prototype.data = function(options) {
      if (typeof options === 'function') {
        return this._base = options;
      } else {
        return this._data = $.extend({}, this._data, options);
      }
    };

    IndustryModel.prototype.klass = function(obj) {
      return this._klass = obj;
    };

    IndustryModel.prototype.create = function() {
      var data, i, key, trait, traits, val, _i, _len;
      data = arguments[0], traits = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (data === null) {
        data = {};
      }
      data = $.extend({}, this._data, this._base(), data);
      for (i = _i = 0, _len = traits.length; _i < _len; i = ++_i) {
        trait = traits[i];
        if (this._traits[trait]) {
          data = $.extend({}, data, this._traits[trait].apply(this, []));
        }
      }
      for (key in data) {
        val = data[key];
        if (typeof val === 'function') {
          data[key] = val();
        }
      }
      if (this._klass) {
        data = new this._klass(data);
      }
      return data;
    };

    return IndustryModel;

  })();

  IndustryCollection = (function(_super) {
    __extends(IndustryCollection, _super);

    IndustryCollection.prototype._model = false;

    function IndustryCollection() {
      this._model = false;
      IndustryCollection.__super__.constructor.apply(this, arguments);
    }

    IndustryCollection.prototype.model = function(m) {
      return this._model = m;
    };

    IndustryCollection.prototype.create = function() {
      var collection, count, data, i, model, traits, _i, _klass;
      data = arguments[0], count = arguments[1], model = arguments[2], traits = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      if (data === null) {
        data = {};
      }
      _klass = this._klass;
      this._klass = false;
      data = IndustryCollection.__super__.create.apply(this, [data].concat(__slice.call(traits)));
      this._klass = _klass;
      if (!count) {
        count = 5;
      }
      collection = [];
      if (!model && this._model) {
        model = this._model;
      }
      if (typeof model !== 'undefined' && model !== null) {
        for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
          collection.push(model.create.apply(model, [data].concat(__slice.call(traits))));
        }
      }
      if (this._klass) {
        collection = new this._klass(collection);
      }
      return collection;
    };

    return IndustryCollection;

  })(IndustryModel);

  ModelFactory = (function() {
    function ModelFactory() {}

    ModelFactory._klass = IndustryModel;

    ModelFactory.define = function(options, callback) {
      var instance, name, trait, _ref;
      instance = new this._klass;
      if (!callback && typeof options === 'function') {
        callback = options;
      } else if (typeof options === 'object') {
        if (options.parent) {
          instance.data(options.parent._base);
          instance.data(options.parent._data);
          instance.klass(options.parent._klass);
          _ref = options.parent._traits;
          for (name in _ref) {
            trait = _ref[name];
            instance.trait(name, trait);
          }
        }
        if (options.data) {
          instance.data(options.data);
        }
        if (options.traits) {
          instance.traits(options.traits);
        }
        if (options.klass) {
          instance.klass(options.klass);
        }
        if (options.model) {
          instance.model(options.model);
        }
      }
      if (typeof callback === 'function') {
        callback(instance);
      }
      return instance;
    };

    return ModelFactory;

  })();

  CollectionFactory = (function(_super) {
    __extends(CollectionFactory, _super);

    function CollectionFactory() {
      _ref = CollectionFactory.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CollectionFactory._klass = IndustryCollection;

    return CollectionFactory;

  })(ModelFactory);

  if (typeof window !== 'undefined') {
    window.industry = {};
    window.industry.model = ModelFactory;
    window.industry.collection = CollectionFactory;
  } else if (typeof module !== 'undefined') {
    _ = require('underscore');
    module.exports.industry = {};
    module.exports.industry.model = ModelFactory;
    module.exports.industry.collection = CollectionFactory;
  }

  if (typeof $ === 'undefined' && typeof _ !== 'undefined') {
    $ = _;
  } else if (typeof $ === 'undefined' && typeof _ === 'undefined') {
    throw "Underscore.js or jQuery is required.";
  }

}).call(this);
