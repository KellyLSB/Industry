// Generated by CoffeeScript 1.6.3
(function() {
  var $, IndustryCollection, IndustryFactory, IndustryModel, TraitSelection, _,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IndustryModel = (function() {
    IndustryModel.prototype._traits = {};

    IndustryModel.prototype._data = {};

    IndustryModel.prototype._base = function() {
      return {};
    };

    IndustryModel.prototype._klass = false;

    function IndustryModel(data) {
      this._traits = {};
      this._data = {};
      this._base = function() {
        return {};
      };
      this._klass = false;
    }

    IndustryModel.prototype.sequence = function(name) {
      return IndustryFactory.sequence(name);
    };

    IndustryModel.prototype.trait = function(name, afunc) {
      return this._traits[name] = afunc;
    };

    IndustryModel.prototype.traits = function(traits) {
      if (arguments.length < 1) {
        return this._traits;
      }
      return this._traits = $.extend({}, this._traits, traits);
    };

    IndustryModel.prototype.data = function(options) {
      if (typeof options === 'function') {
        return this._base = options;
      } else {
        return this._data = $.extend({}, this._data, options);
      }
    };

    IndustryModel.prototype.klass = function(obj) {
      return this._klass = obj;
    };

    IndustryModel.prototype.create = function() {
      var data, key, traits, val,
        _this = this;
      traits = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      data = $.extend({}, this._data, this._base());
      new TraitSelection(this).each(traits, function(trait, d) {
        return data = $.extend({}, data, trait.apply(_this, d));
      });
      for (key in data) {
        val = data[key];
        if (typeof val === 'function') {
          data[key] = val.call(this);
        }
      }
      if (this._klass) {
        data = new this._klass(data);
      }
      return data;
    };

    return IndustryModel;

  })();

  IndustryCollection = (function(_super) {
    __extends(IndustryCollection, _super);

    IndustryCollection.prototype._model = false;

    function IndustryCollection() {
      this._model = false;
      IndustryCollection.__super__.constructor.apply(this, arguments);
    }

    IndustryCollection.prototype.model = function(m) {
      return this._model = m;
    };

    IndustryCollection.prototype.create = function() {
      var argument, collection, count, data, i, model, traits, _i, _j, _klass, _len;
      count = 5;
      traits = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        argument = arguments[_i];
        if (typeof argument.constructor !== 'undefined' && argument.constructor.name === 'IndustryModel') {
          model = argument;
        } else if (typeof argument === 'number') {
          count = argument;
        } else {
          traits.push(argument);
        }
      }
      _klass = this._klass;
      this._klass = false;
      data = IndustryCollection.__super__.create.call(this);
      this._klass = _klass;
      collection = [];
      if (!model && this._model) {
        model = this._model;
      }
      if (typeof model === 'undefined' || model === null) {
        throw "No model for collection";
      } else {
        if (count > 0) {
          for (i = _j = 1; 1 <= count ? _j <= count : _j >= count; i = 1 <= count ? ++_j : --_j) {
            model.traits(this._traits);
            model.data(data);
            collection.push(model.create.apply(model, traits));
          }
        }
      }
      if (this._klass) {
        collection = new this._klass(collection);
      }
      return collection;
    };

    return IndustryCollection;

  })(IndustryModel);

  IndustryFactory = (function() {
    var define, klass, sequences;

    function IndustryFactory() {}

    klass = IndustryModel;

    sequences = {};

    define = function(options, callback) {
      var instance, name, trait, _ref;
      instance = new klass;
      if (!callback && typeof options === 'function') {
        callback = options;
      } else if (typeof options === 'object') {
        if (options.parent) {
          instance.data(options.parent._base);
          instance.data(options.parent._data);
          instance.klass(options.parent._klass);
          _ref = options.parent._traits;
          for (name in _ref) {
            trait = _ref[name];
            instance.trait(name, trait);
          }
        }
        if (options.data) {
          instance.data(options.data);
        }
        if (options.traits) {
          instance.traits(options.traits);
        }
        if (options.klass) {
          instance.klass(options.klass);
        }
        if (options.model) {
          instance.model(options.model);
        }
      }
      if (typeof callback === 'function') {
        callback(instance);
      }
      return instance;
    };

    IndustryFactory.sequence = function(name) {
      if (typeof sequences[name] === 'undefined') {
        return sequences[name] = 1;
      } else {
        return ++sequences[name];
      }
    };

    IndustryFactory.defineCollection = function() {
      klass = IndustryCollection;
      return define.apply(this, arguments);
    };

    IndustryFactory.defineModel = function(options, callback) {
      klass = IndustryModel;
      return define.apply(this, arguments);
    };

    return IndustryFactory;

  })();

  TraitSelection = (function() {
    TraitSelection.obj = false;

    function TraitSelection(obj) {
      this.obj = obj;
    }

    TraitSelection.prototype.each = function(traits, callback) {
      var name, newtraits, option_tool, options, trait, trait_names, _i, _len, _results;
      newtraits = {};
      for (_i = 0, _len = traits.length; _i < _len; _i++) {
        trait = traits[_i];
        if (typeof trait === 'string') {
          newtraits[trait] = [];
        }
        if (typeof trait === 'object') {
          newtraits = $.extend({}, newtraits, trait);
        }
      }
      traits = newtraits;
      trait_names = [];
      _results = [];
      for (trait in traits) {
        arguments = traits[trait];
        options = trait.split(':');
        name = options.shift();
        trait_names.push(name);
        trait = this.obj._traits[name];
        if (typeof trait !== 'undefined') {
          option_tool = {
            hasTrait: function(name) {
              return trait_names.indexOf(name) !== -1;
            },
            hasOption: function() {
              return this.hasOptions.apply(this, arguments);
            },
            hasOptions: function() {
              var input, option, result, _j, _len1;
              input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              if (options.length < 1) {
                return false;
              }
              if (options.indexOf('all!') !== -1) {
                return true;
              }
              result = true;
              for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
                option = input[_j];
                result = result && options.indexOf(option) !== -1;
              }
              return result;
            }
          };
          _results.push(callback(trait, [option_tool].concat(arguments)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return TraitSelection;

  })();

  if (typeof window !== 'undefined') {
    window.industry = IndustryFactory;
  } else if (typeof module !== 'undefined') {
    _ = require('underscore');
    module.exports.industry = IndustryFactory;
  }

  if (typeof $ === 'undefined' && typeof _ !== 'undefined') {
    $ = _;
  } else if (typeof $ === 'undefined' && typeof _ === 'undefined') {
    throw "Underscore.js or jQuery is required.";
  }

}).call(this);
